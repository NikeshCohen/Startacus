export const Icons = {
  betterAuth: (props: React.SVGProps<SVGSVGElement>) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 500 500"
      {...props}
    >
      <path fill="#fff" d="M0 0h500v500H0z" />
      <path
        fill="#000"
        d="M69 121h86.988v259H69zM337.575 121H430v259h-92.425z"
      />
      <path
        fill="#000"
        d="M427.282 121v83.456h-174.52V121zM430 296.544V380H252.762v-83.456z"
      />
      <path fill="#000" d="M252.762 204.455v92.089h-96.774v-92.089z" />
    </svg>
  ),
  drizzle: (props: React.SVGProps<SVGSVGElement>) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="160"
      height="160"
      fill="none"
      viewBox="0 0 160 160"
      {...props}
    >
      <rect
        width="9.631"
        height="40.852"
        fill="#C5F74F"
        rx="4.816"
        transform="matrix(.87303 .48767 -.49721 .86763 43.48 67.304)"
      />
      <rect
        width="9.631"
        height="40.852"
        fill="#C5F74F"
        rx="4.816"
        transform="matrix(.87303 .48767 -.49721 .86763 76.94 46.534)"
      />
      <rect
        width="9.631"
        height="40.852"
        fill="#C5F74F"
        rx="4.816"
        transform="matrix(.87303 .48767 -.49721 .86763 128.424 46.535)"
      />
      <rect
        width="9.631"
        height="40.852"
        fill="#C5F74F"
        rx="4.816"
        transform="matrix(.87303 .48767 -.49721 .86763 94.957 67.304)"
      />
    </svg>
  ),
  nextjs: (props: React.SVGProps<SVGSVGElement>) => (
    <svg
      width="180"
      height="180"
      viewBox="0 0 180 180"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <mask
        id="mask0_408_139"
        style={{ maskType: "alpha" }}
        maskUnits="userSpaceOnUse"
        x="0"
        y="0"
        width="180"
        height="180"
      >
        <circle cx="90" cy="90" r="90" fill="black" />
      </mask>
      <g mask="url(#mask0_408_139)">
        <circle
          cx="90"
          cy="90"
          r="87"
          fill="black"
          stroke="white"
          strokeWidth="6"
        />
        <path
          d="M149.508 157.52L69.142 54H54V125.97H66.1136V69.3836L139.999 164.845C143.333 162.614 146.509 160.165 149.508 157.52Z"
          fill="url(#paint0_linear_408_139)"
        />
        <rect
          x="115"
          y="54"
          width="12"
          height="72"
          fill="url(#paint1_linear_408_139)"
        />
      </g>
      <defs>
        <linearGradient
          id="paint0_linear_408_139"
          x1="109"
          y1="116.5"
          x2="144.5"
          y2="160.5"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="white" />
          <stop offset="1" stopColor="white" stopOpacity="0" />
        </linearGradient>
        <linearGradient
          id="paint1_linear_408_139"
          x1="121"
          y1="54"
          x2="120.799"
          y2="106.875"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="white" />
          <stop offset="1" stopColor="white" stopOpacity="0" />
        </linearGradient>
      </defs>
    </svg>
  ),
  react: (props: React.SVGProps<SVGSVGElement>) => (
    <svg
      width="569px"
      height="512px"
      viewBox="0 0 569 512"
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g fill="none" fillRule="evenodd">
        <g transform="translate(-227, -256)" fill="#58C4DC" fillRule="nonzero">
          <g transform="translate(227, 256)">
            <path
              d="M285.5,201 C255.400481,201 231,225.400481 231,255.5 C231,285.599519 255.400481,310 285.5,310 C315.599519,310 340,285.599519 340,255.5 C340,225.400481 315.599519,201 285.5,201"
              id="Path"
            ></path>
            <path
              d="M568.959856,255.99437 C568.959856,213.207656 529.337802,175.68144 466.251623,150.985214 C467.094645,145.423543 467.85738,139.922107 468.399323,134.521063 C474.621631,73.0415145 459.808523,28.6686204 426.709856,9.5541429 C389.677085,-11.8291748 337.36955,3.69129898 284.479928,46.0162134 C231.590306,3.69129898 179.282771,-11.8291748 142.25,9.5541429 C109.151333,28.6686204 94.3382249,73.0415145 100.560533,134.521063 C101.102476,139.922107 101.845139,145.443621 102.708233,151.02537 C97.4493791,153.033193 92.2908847,155.161486 87.3331099,157.39017 C31.0111824,182.708821 0,217.765415 0,255.99437 C0,298.781084 39.6220545,336.307301 102.708233,361.003527 C101.845139,366.565197 101.102476,372.066633 100.560533,377.467678 C94.3382249,438.947226 109.151333,483.32012 142.25,502.434597 C153.629683,508.887578 166.52439,512.186771 179.603923,511.991836 C210.956328,511.991836 247.567589,495.487529 284.479928,465.972527 C321.372196,495.487529 358.003528,511.991836 389.396077,511.991836 C402.475265,512.183856 415.36922,508.884856 426.75,502.434597 C459.848667,483.32012 474.661775,438.947226 468.439467,377.467678 C467.897524,372.066633 467.134789,366.565197 466.291767,361.003527 C529.377946,336.347457 569,298.761006 569,255.99437 M389.155214,27.1025182 C397.565154,26.899606 405.877839,28.9368502 413.241569,33.0055186 C436.223966,46.2772304 446.540955,82.2775015 441.522965,131.770345 C441.181741,135.143488 440.780302,138.556788 440.298575,141.990165 C414.066922,134.08804 387.205771,128.452154 360.010724,125.144528 C343.525021,103.224055 325.192524,82.7564475 305.214266,63.9661533 C336.586743,39.7116483 366.032313,27.1025182 389.135142,27.1025182 M378.356498,310.205598 C368.204912,327.830733 357.150626,344.919965 345.237759,361.405091 C325.045049,363.479997 304.758818,364.51205 284.459856,364.497299 C264.167589,364.51136 243.888075,363.479308 223.702025,361.405091 C211.820914,344.919381 200.80007,327.83006 190.683646,310.205598 C180.532593,292.629285 171.306974,274.534187 163.044553,255.99437 C171.306974,237.454554 180.532593,219.359455 190.683646,201.783142 C200.784121,184.229367 211.770999,167.201087 223.601665,150.764353 C243.824636,148.63809 264.145559,147.579168 284.479928,147.591877 C304.772146,147.579725 325.051559,148.611772 345.237759,150.68404 C357.109048,167.14607 368.136094,184.201112 378.27621,201.783142 C388.419418,219.363718 397.644825,237.458403 405.915303,255.99437 C397.644825,274.530337 388.419418,292.625022 378.27621,310.205598 M419.724813,290.127366 C426.09516,307.503536 431.324985,325.277083 435.380944,343.334682 C417.779633,348.823635 399.836793,353.149774 381.668372,356.285142 C388.573127,345.871232 395.263781,335.035679 401.740334,323.778483 C408.143291,312.655143 414.144807,301.431411 419.805101,290.207679 M246.363271,390.377981 C258.848032,391.140954 271.593728,391.582675 284.5,391.582675 C297.406272,391.582675 310.232256,391.140954 322.737089,390.377981 C310.880643,404.583418 298.10766,417.997563 284.5,430.534446 C270.921643,417.999548 258.18192,404.585125 246.363271,390.377981 Z M187.311556,356.244986 C169.137286,353.123646 151.187726,348.810918 133.578912,343.334682 C137.618549,325.305649 142.828222,307.559058 149.174827,290.207679 C154.754833,301.431411 160.736278,312.655143 167.239594,323.778483 C173.74291,334.901824 180.467017,345.864539 187.311556,356.285142 M149.174827,221.760984 C142.850954,204.473938 137.654787,186.794745 133.619056,168.834762 C151.18418,163.352378 169.085653,159.013101 187.211197,155.844146 C180.346585,166.224592 173.622478,176.986525 167.139234,188.210257 C160.65599,199.433989 154.734761,210.517173 149.074467,221.760984 M322.616657,121.590681 C310.131896,120.827708 297.3862,120.385987 284.379568,120.385987 C271.479987,120.385987 258.767744,120.787552 246.242839,121.590681 C258.061488,107.383537 270.801211,93.9691137 284.379568,81.4342157 C297.99241,93.9658277 310.765727,107.380324 322.616657,121.590681 Z M401.70019,188.210257 C395.196875,176.939676 388.472767,166.09743 381.527868,155.68352 C399.744224,158.819049 417.734224,163.151949 435.380944,168.654058 C431.331963,186.680673 426.122466,204.426664 419.785029,221.781062 C414.205023,210.55733 408.203506,199.333598 401.720262,188.230335 M127.517179,131.790423 C122.438973,82.3176579 132.816178,46.2973086 155.778503,33.0255968 C163.144699,28.9632474 171.455651,26.9264282 179.864858,27.1225964 C202.967687,27.1225964 232.413257,39.7317265 263.785734,63.9862316 C243.794133,82.7898734 225.448298,103.270812 208.949132,125.204763 C181.761691,128.528025 154.90355,134.14313 128.661281,141.990165 C128.199626,138.556788 127.778115,135.163566 127.456963,131.790423 M98.4529773,182.106474 C101.54406,180.767925 104.695358,179.429376 107.906872,178.090828 C114.220532,204.735668 122.781793,230.7969 133.498624,255.99437 C122.761529,281.241316 114.193296,307.357063 107.8868,334.058539 C56.7434387,313.076786 27.0971497,284.003505 27.0971497,255.99437 C27.0971497,229.450947 53.1907013,202.526037 98.4529773,182.106474 Z M155.778503,478.963143 C132.816178,465.691432 122.438973,429.671082 127.517179,380.198317 C127.838331,376.825174 128.259842,373.431953 128.721497,369.978497 C154.953686,377.878517 181.814655,383.514365 209.009348,386.824134 C225.500295,408.752719 243.832321,429.233234 263.805806,448.042665 C220.069,481.834331 180.105722,492.97775 155.838719,478.963143 M441.502893,380.198317 C446.520883,429.691161 436.203894,465.691432 413.221497,478.963143 C388.974566,493.017906 348.991216,481.834331 305.274481,448.042665 C325.241364,429.232737 343.566681,408.752215 360.050868,386.824134 C387.245915,383.516508 414.107066,377.880622 440.338719,369.978497 C440.820446,373.431953 441.221885,376.825174 441.563109,380.198317 M461.193488,334.018382 C454.869166,307.332523 446.294494,281.231049 435.561592,255.99437 C446.289797,230.744081 454.857778,204.629101 461.173416,177.930202 C512.216417,198.911955 541.942994,227.985236 541.942994,255.99437 C541.942994,284.003505 512.296705,313.076786 461.153344,334.058539"
              id="Shape"
            ></path>
          </g>
        </g>
      </g>
    </svg>
  ),
  resend: (props: React.SVGProps<SVGSVGElement>) => (
    <svg
      width="600"
      height="600"
      viewBox="0 0 600 600"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M186 447.471V154H318.062C336.788 154 353.697 158.053 368.79 166.158C384.163 174.263 396.181 185.443 404.845 199.698C413.51 213.672 417.842 229.604 417.842 247.491C417.842 265.938 413.51 282.568 404.845 297.381C396.181 311.915 384.302 323.375 369.209 331.759C354.117 340.144 337.067 344.337 318.062 344.337H253.917V447.471H186ZM348.667 447.471L274.041 314.99L346.99 304.509L430 447.471H348.667ZM253.917 289.835H311.773C319.04 289.835 325.329 288.298 330.639 285.223C336.229 281.869 340.421 277.258 343.216 271.388C346.291 265.519 347.828 258.811 347.828 251.265C347.828 243.718 346.151 237.15 342.797 231.56C339.443 225.691 334.552 221.219 328.124 218.144C321.975 215.07 314.428 213.533 305.484 213.533H253.917V289.835Z"
        fill="currentColor"
      />
    </svg>
  ),

  supabase: (props: React.SVGProps<SVGSVGElement>) => (
    <svg
      viewBox="0 0 109 113"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M63.7076 110.284C60.8481 113.885 55.0502 111.912 54.9813 107.314L53.9738 40.0627L99.1935 40.0627C107.384 40.0627 111.952 49.5228 106.859 55.9374L63.7076 110.284Z"
        fill="url(#spaint0_linear)"
      />
      <path
        d="M63.7076 110.284C60.8481 113.885 55.0502 111.912 54.9813 107.314L53.9738 40.0627L99.1935 40.0627C107.384 40.0627 111.952 49.5228 106.859 55.9374L63.7076 110.284Z"
        fill="url(#spaint1_linear)"
        fillOpacity="0.2"
      />
      <path
        d="M45.317 2.07103C48.1765 -1.53037 53.9745 0.442937 54.0434 5.041L54.4849 72.2922H9.83113C1.64038 72.2922 -2.92775 62.8321 2.1655 56.4175L45.317 2.07103Z"
        fill="#3ECF8E"
      />
      <defs>
        <linearGradient
          id="spaint0_linear"
          x1="53.9738"
          y1="54.974"
          x2="94.1635"
          y2="71.8295"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#249361" />
          <stop offset="1" stopColor="#3ECF8E" />
        </linearGradient>
        <linearGradient
          id="spaint1_linear"
          x1="36.1558"
          y1="30.578"
          x2="54.4844"
          y2="65.0806"
          gradientUnits="userSpaceOnUse"
        >
          <stop />
          <stop offset="1" stopOpacity="0" />
        </linearGradient>
      </defs>
    </svg>
  ),
  tailwind: (props: React.SVGProps<SVGSVGElement>) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 54 33"
      {...props}
    >
      <g clipPath="url(#a)">
        <path
          fill="#38bdf8"
          fillRule="evenodd"
          d="M27 0c-7.2 0-11.7 3.6-13.5 10.8 2.7-3.6 5.85-4.95 9.45-4.05 2.054.513 3.522 2.004 5.147 3.653C30.744 13.09 33.808 16.2 40.5 16.2c7.2 0 11.7-3.6 13.5-10.8-2.7 3.6-5.85 4.95-9.45 4.05-2.054-.513-3.522-2.004-5.147-3.653C36.756 3.11 33.692 0 27 0zM13.5 16.2C6.3 16.2 1.8 19.8 0 27c2.7-3.6 5.85-4.95 9.45-4.05 2.054.514 3.522 2.004 5.147 3.653C17.244 29.29 20.308 32.4 27 32.4c7.2 0 11.7-3.6 13.5-10.8-2.7 3.6-5.85 4.95-9.45 4.05-2.054-.513-3.522-2.004-5.147-3.653C23.256 19.31 20.192 16.2 13.5 16.2z"
          clipRule="evenodd"
        />
      </g>
      <defs>
        <clipPath id="a">
          <path fill="#fff" d="M0 0h54v32.4H0z" />
        </clipPath>
      </defs>
    </svg>
  ),
  tanstackquery: (props: React.SVGProps<SVGSVGElement>) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      preserveAspectRatio="xMidYMid"
      viewBox="0 0 256 230"
      {...props}
    >
      <path
        d="m158 142.5-5 8.5a8.3 8.3 0 0 1-7.1 4.2h-37.6c-3 0-5.7-1.6-7.2-4.2l-5-8.5H158Zm13.7-23.9-8.6 15H91l-8.7-15h89.3Zm-8.3-23.3 8.3 14.5H82.4l8.4-14.5h72.6Zm-17.5-22c3 0 5.7 1.5 7.2 4l5.2 9.1H95.9l5.2-9a8.3 8.3 0 0 1 7.2-4.2h37.6Z"
        fill="#00435B"
      />
      <path
        d="M53.5 69.3c-4.1-20.3-5-35.8-2.3-47a30.2 30.2 0 0 1 9-16.1A25.5 25.5 0 0 1 77.4 0c11 0 22.6 5 35 14.6 5 3.9 10.2 8.6 15.7 14l1.4-1.5C145 13.4 158 4.9 169.1 1.6c6.6-2 12.7-2.2 18.4-.3 6 2 10.7 6.2 14 12 5.5 9.5 7 22 5 37.6-1 6.3-2.4 13.2-4.4 20.7.8 0 1.5.2 2.3.5 19.5 6.4 33.3 13.4 41.7 21.4 5 4.7 8.2 10 9.4 15.8 1.3 6.1 0 12.3-3.3 18.1-5.5 9.5-15.6 17-30 23-5.8 2.4-12.4 4.6-19.7 6.6l.8 2.3c4.1 20.3 5 35.7 2.3 47a30.2 30.2 0 0 1-9 16.1 25.5 25.5 0 0 1-17.3 6.2c-11 0-22.6-5-35-14.6-5-4-10.4-8.7-15.9-14.2-.5.9-1.2 1.7-2 2.4C111 216 98 224.4 86.9 227.7c-6.6 2-12.7 2.2-18.4.3-6-2-10.7-6.2-14-12-5.5-9.5-7-22-5-37.6 1-6.5 2.5-13.7 4.6-21.5-.8 0-1.7-.2-2.5-.5C32.1 149.9 18.3 143 9.9 135c-5-4.7-8.2-10-9.4-15.8-1.3-6.2 0-12.3 3.3-18.1 5.5-9.6 15.6-17.1 30-23 6-2.5 12.8-4.8 20.4-6.8l-.7-2Z"
        fill="#002B3B"
      />
      <path
        d="M189.6 161.3c2-.3 3.8 1 4.3 2.8v.2l.2 1c6.7 35.3 2 53-14.2 53-15.8 0-36-15.1-60.4-45.2a3.7 3.7 0 0 1 2.8-6H123.7a354 354 0 0 0 66-5.8Zm-111-26.6h.1l.7 1.2a358 358 0 0 0 38.4 54.5 3.7 3.7 0 0 1-.3 5.1v.1l-1 .7c-27.2 23.4-45 28-53.2 14-8-13.7-5-38.7 8.8-75a3.7 3.7 0 0 1 6.5-.6Zm124.9-52h.1l1 .3c33.7 11.7 46.6 24.6 38.5 38.7-8 13.7-31 23.7-69 30a3.7 3.7 0 0 1-3.9-5.5A359.6 359.6 0 0 0 199 84.9a3.7 3.7 0 0 1 4.4-2.3h.1Zm-119-6c1.7 1 2.3 3.3 1.3 5A359.6 359.6 0 0 0 57 143a3.7 3.7 0 0 1-4.5 2.3h-.1l-1-.4c-33.7-11.7-46.6-24.6-38.5-38.6 8-13.8 31-23.8 69-30 1-.2 1.8 0 2.5.4ZM192.6 19c8 13.7 5 38.7-8.8 75a3.7 3.7 0 0 1-6.5.6h-.1l-.7-1.2a358 358 0 0 0-38.4-54.5 3.7 3.7 0 0 1 .3-5.1v-.1l1-.7c27.2-23.4 45-28 53.2-14ZM77.4 10.6c15.9 0 36 15 60.4 45.1a3.7 3.7 0 0 1-2.7 6h-1.4a354 354 0 0 0-66 5.8c-2 .3-3.8-.9-4.2-2.8v-.1l-.2-1.1c-6.7-35.3-2-53 14.1-53Z"
        fill="#FF4154"
      />
      <path
        d="M111.3 73.7h31.6c4.6 0 8.9 2.4 11.2 6.4l15.8 27.7c2.3 4 2.3 8.8 0 12.8l-15.8 27.6c-2.3 4-6.6 6.5-11.2 6.5h-31.6c-4.6 0-8.9-2.5-11.2-6.5l-15.8-27.6c-2.3-4-2.3-8.9 0-12.8L100 80c2.3-4 6.6-6.4 11.2-6.4ZM138 82c4.6 0 8.8 2.5 11.1 6.5l11.1 19.3c2.3 4 2.3 8.8 0 12.8l-11 19.3c-2.4 4-6.6 6.5-11.2 6.5h-22c-4.6 0-8.9-2.5-11.2-6.5l-11-19.3c-2.3-4-2.3-8.9 0-12.8l11-19.3c2.3-4 6.6-6.5 11.2-6.5h22Zm-5.2 9.1h-11.6c-4.6 0-8.9 2.5-11.2 6.5l-5.8 10.2c-2.3 4-2.3 8.8 0 12.8l5.8 10.2c2.3 4 6.6 6.4 11.2 6.4h11.6c4.6 0 8.8-2.4 11.1-6.4l5.9-10.2c2.3-4 2.3-8.9 0-12.8L144 97.6c-2.3-4-6.5-6.5-11.1-6.5Zm-5 8.8c4.6 0 8.8 2.4 11.1 6.4l.9 1.5c2.3 4 2.3 8.8 0 12.8l-.9 1.5c-2.3 4-6.5 6.4-11.1 6.4h-1.6c-4.6 0-8.9-2.4-11.2-6.4l-.8-1.5c-2.3-4-2.3-8.9 0-12.8l.8-1.5c2.3-4 6.6-6.4 11.2-6.4h1.6Zm-.8 8.6a5.7 5.7 0 1 0 0 11.4 5.7 5.7 0 1 0 0-11.4Zm-46.5 5.7h10.3"
        fill="#FFD94C"
      />
    </svg>
  ),
  typescript: (props: React.SVGProps<SVGSVGElement>) => (
    <svg
      viewBox="0 0 256 256"
      width="256"
      height="256"
      xmlns="http://www.w3.org/2000/svg"
      preserveAspectRatio="xMidYMid"
      {...props}
    >
      <path
        d="M20 0h216c11.046 0 20 8.954 20 20v216c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20V20C0 8.954 8.954 0 20 0Z"
        fill="#3178C6"
      />
      <path
        d="M150.518 200.475v27.62c4.492 2.302 9.805 4.028 15.938 5.179 6.133 1.151 12.597 1.726 19.393 1.726 6.622 0 12.914-.633 18.874-1.899 5.96-1.266 11.187-3.352 15.678-6.257 4.492-2.906 8.048-6.704 10.669-11.394 2.62-4.689 3.93-10.486 3.93-17.391 0-5.006-.749-9.394-2.246-13.163a30.748 30.748 0 0 0-6.479-10.055c-2.821-2.935-6.205-5.567-10.149-7.898-3.945-2.33-8.394-4.531-13.347-6.602-3.628-1.497-6.881-2.949-9.761-4.359-2.879-1.41-5.327-2.848-7.342-4.316-2.016-1.467-3.571-3.021-4.665-4.661-1.094-1.64-1.641-3.495-1.641-5.567 0-1.899.489-3.61 1.468-5.135s2.362-2.834 4.147-3.927c1.785-1.094 3.973-1.942 6.565-2.547 2.591-.604 5.471-.906 8.638-.906 2.304 0 4.737.173 7.299.518 2.563.345 5.14.877 7.732 1.597a53.669 53.669 0 0 1 7.558 2.719 41.7 41.7 0 0 1 6.781 3.797v-25.807c-4.204-1.611-8.797-2.805-13.778-3.582-4.981-.777-10.697-1.165-17.147-1.165-6.565 0-12.784.705-18.658 2.115-5.874 1.409-11.043 3.61-15.506 6.602-4.463 2.993-7.99 6.805-10.582 11.437-2.591 4.632-3.887 10.17-3.887 16.615 0 8.228 2.375 15.248 7.127 21.06 4.751 5.811 11.963 10.731 21.638 14.759a291.458 291.458 0 0 1 10.625 4.575c3.283 1.496 6.119 3.049 8.509 4.66 2.39 1.611 4.276 3.366 5.658 5.265 1.382 1.899 2.073 4.057 2.073 6.474a9.901 9.901 0 0 1-1.296 4.963c-.863 1.524-2.174 2.848-3.93 3.97-1.756 1.122-3.945 1.999-6.565 2.632-2.62.633-5.687.95-9.2.95-5.989 0-11.92-1.05-17.794-3.151-5.875-2.1-11.317-5.25-16.327-9.451Zm-46.036-68.733H140V109H41v22.742h35.345V233h28.137V131.742Z"
        fill="#FFF"
      />
    </svg>
  ),
  shadcn: (props: React.SVGProps<SVGSVGElement>) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" {...props}>
      <path fill="none" d="M0 0h256v256H0z" />
      <path
        fill="none"
        stroke="currentColor"
        strokeWidth="25"
        strokeLinecap="round"
        d="M208 128l-80 80M192 40L40 192"
      />
    </svg>
  ),
};

export const techStackInfo = [
  {
    name: "BetterAuth",
    icon: Icons.betterAuth,
    description:
      "Simple, secure authentication with social logins, 2FA, and robust session management for modern apps.",
    link: "https://www.better-auth.com",
  },
  {
    name: "Drizzle",
    icon: Icons.drizzle,
    description:
      "Typesafe SQL for TypeScript with automatic migrations and flexible schema management.",
    link: "https://orm.drizzle.team/docs/get-started/singlestore-new",
  },
  {
    name: "Next.js",
    icon: Icons.nextjs,
    description:
      "Full-stack React framework for building fast, scalable web apps with SSR and API routes.",
    link: "https://nextjs.org",
  },
  {
    name: "Resend",
    icon: Icons.resend,
    description:
      "Reliable email API for developers with fast delivery and easy integration.",
    link: "https://resend.com",
  },
  {
    name: "Shadcn/ui",
    icon: Icons.shadcn,
    description:
      "Reusable, accessible UI components designed for modern React projects.",
    link: "https://ui.shadcn.com/",
  },
  {
    name: "Supabase",
    icon: Icons.supabase,
    description:
      "Open source Firebase alternative with instant APIs, auth, and real-time database.",
    link: "https://supabase.com",
  },
  {
    name: "Tailwind CSS",
    icon: Icons.tailwind,
    description:
      "Utility-first CSS framework for rapid, customizable UI development.",
    link: "https://tailwindcss.com",
  },
  {
    name: "TanStack Query",
    icon: Icons.tanstackquery,
    description:
      "Powerful data-fetching and state management for React and TypeScript.",
    link: "https://tanstack.com/query",
  },
  {
    name: "TypeScript",
    icon: Icons.typescript,
    description:
      "JavaScript with static types for safer, more maintainable code.",
    link: "https://www.typescriptlang.org",
  },
];
